# Generated by Selenium IDE
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait

from core.environment.host import get_host_for_selenium_testing
from core.selenium.common import initialize_driver, close_driver
import time


def wait_for_page_to_load(driver, timeout=4):
    WebDriverWait(driver, timeout).until(
        lambda driver: driver.execute_script("return document.readyState") == "complete"
    )


def wait_datasets_to_change():
    # There is no real alternative to this
    time.sleep(0.5)


def set_input(driver, input, value):
    query_field = driver.find_element(By.ID, input)

    driver.execute_script("""
        arguments[0].value = arguments[1];
        arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
    """, query_field, value)


def set_checkbox(driver, input, value):
    query_field = driver.find_element(By.ID, input)

    driver.execute_script("""
        arguments[0].checked = arguments[1];
        arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
    """, query_field, value)


def check_num_datasets(driver, expected):
    wait_datasets_to_change()
    datasets = driver.find_element(By.ID, "results").find_elements(By.XPATH, "./*")
    assert len(datasets) == expected, f"Expected {expected} datasets but found {len(datasets)}"


def test_publication_type():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')

    set_input(driver, "publication_type", "asd")
    check_num_datasets(driver, 4)

    set_input(driver, "publication_type", "none")
    check_num_datasets(driver, 0)

    set_input(driver, "publication_type", "book")
    check_num_datasets(driver, 0)

    set_input(driver, "publication_type", "datamanagementplan")
    check_num_datasets(driver, 4)

    set_input(driver, "publication_type", "any")
    check_num_datasets(driver, 4)

    set_input(driver, "publication_type", "report")
    check_num_datasets(driver, 0)

    close_driver(driver)


def test_query_search():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "sample dataset 1")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "sample dataset 2")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "sample dataset 3")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "sample dataset 4")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "tag1")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "tag2")
    check_num_datasets(driver, 4)

    close_driver(driver)


def test_filtrer_publication_type():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')

    set_input(driver, "query", "publication_type:asd")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "publication_type:none")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "publication_type:book")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "publication_type:datamanagementplan")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "publication_type:any")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "publication_type:report")
    check_num_datasets(driver, 0)

    close_driver(driver)


def test_size_filter():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "min_size:1000")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_size:1242")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_size:1243")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "max_size:2000")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "max_size:1242")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "max_size:1241")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "min_size:1242;max_size:1242")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_size:1243;max_size:1243")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "min_size:1241;max_size:1241")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "min_size:500;max_size:2000")
    check_num_datasets(driver, 4)

    close_driver(driver)


def test_title_filtrer():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "title: sample dataset 1")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "title: sample dataset 2")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "title: sample dataset 3")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "title: sample dataset 4")
    check_num_datasets(driver, 1)

    close_driver(driver)


def test_num_models_filters():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "models_max:3")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "models_max:2")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "models_max:4")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "models_min:3")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "models_min:2")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "models_min:4")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "models_min:2;models_max:5")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "models_min:1;models_max:2")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "models_min:1;models_max:3")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "models_min:4;models_max:5")
    check_num_datasets(driver, 0)

    close_driver(driver)


def test_tags_filters():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "tags:tag2")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "tags:invalid-tag")
    check_num_datasets(driver, 0)

    close_driver(driver)


def test_author_search():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "author:Author 2")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "author:Author")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "author:noExist Author")
    check_num_datasets(driver, 0)

    close_driver(driver)


test_publication_type()

test_query_search()

test_filtrer_publication_type()

test_size_filter()

test_title_filtrer()

test_num_models_filters()

test_tags_filters()

test_author_search()
